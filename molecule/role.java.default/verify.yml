---
- name: Oracle JDK | Molecule | Verify
  hosts: all
  gather_facts: false
  tasks:
    - name: Oracle JDK | Molecule | Verify | Import Roles for variables
      ansible.builtin.import_role:
        name: arpanrec.nebula.java
        tasks_from: prerequisites

    - name: Oracle JDK | Molecule | Verify | Get javac version from shell
      ansible.builtin.command: javac --version
      environment:
        PATH: "{{ java_rv_jdk_install_path }}/bin:{{ ansible_env.PATH }}"
      register: java_rv_jdk_tmp_version_shell_result
      changed_when: false

    - name: Oracle JDK | Molecule | Verify | javac version from shell result
      ansible.builtin.debug:
        var: java_rv_jdk_tmp_version_shell_result

    - name: Oracle JDK | Molecule | Verify | Fail if javac version is not present
      ansible.builtin.assert:
        that: java_rv_jdk_tmp_version_shell_result.stdout is match("javac "+java_rv_jdk_version+".*")
        success_msg: Java Version {{ java_rv_jdk_version }} is installed
        fail_msg: Java Version {{ java_rv_jdk_version }} is not installed, Shell result {{ java_rv_jdk_tmp_version_shell_result.stdout }}

    - name: Oracle JDK | Apache Maven | Molecule | Get Dynamic Version
      when: java_rv_jdk_mvn_version is not defined
      block:
        - name: Oracle JDK | Apache Maven | Molecule | Get Latest Release from github
          ansible.builtin.uri:
            url: "https://api.github.com/repos/apache/maven/releases/latest"
            return_content: true
            headers:
              Accept: "application/vnd.github.v3+json"
          register: java_rv_mvn_latest_release_from_github

        - name: Oracle JDK | Apache Maven | Molecule | Set Dynamic Version
          ansible.builtin.set_fact:
            java_rv_jdk_mvn_version: "{{ java_rv_mvn_latest_release_from_github.json.name }}"

    - name: Oracle JDK | Apache Maven | Molecule | Verify | Get mvn version from shell
      ansible.builtin.command: mvn --version
      environment:
        PATH: "{{ java_rv_jdk_mvn_install_path }}/bin:{{ java_rv_jdk_install_path }}/bin:{{ ansible_env.PATH }}"
      register: java_rv_jdk_maven_tmp_version_shell_result
      changed_when: false

    - name: Oracle JDK | Apache Maven | Molecule | Verify | mvn version from shell result
      ansible.builtin.debug:
        var: java_rv_jdk_maven_tmp_version_shell_result

    - name: Oracle JDK | Apache Maven | Molecule | Verify | Fail if mvn version is not present
      ansible.builtin.assert:
        that: java_rv_jdk_maven_tmp_version_shell_result.stdout_lines[0] is match("Apache Maven " + java_rv_jdk_mvn_version + ".*")
        success_msg: Apache Maven {{ java_rv_jdk_mvn_version }} is installed
        fail_msg: Apache Maven {{ java_rv_jdk_mvn_version }} is not installed, Shell result {{ java_rv_jdk_maven_tmp_version_shell_result.stdout }}

    - name: Oracle JDK | Gradle | Molecule | Get Dynamic Version
      when: java_rv_jdk_gradle_version is not defined
      block:
        - name: Oracle JDK | Gradle | Molecule | Get Latest Release from github
          ansible.builtin.uri:
            url: "https://api.github.com/repos/gradle/gradle/releases/latest"
            return_content: true
            headers:
              Accept: "application/vnd.github.v3+json"
          register: java_rv_gradle_latest_release_from_github

        - name: Oracle JDK | Gradle | Molecule | Set Dynamic Version
          ansible.builtin.set_fact:
            java_rv_jdk_gradle_version: "{{ java_rv_gradle_latest_release_from_github.json.name }}"

    - name: Oracle JDK | Gradle | Molecule | Verify | Get Gradle version from shell
      ansible.builtin.command: gradle -version
      environment:
        PATH: "{{ java_rv_jdk_gradle_install_path }}/bin:{{ java_rv_jdk_install_path }}/bin:{{ ansible_env.PATH }}"
      register: java_rv_jdk_gradle_tmp_version_shell_result
      changed_when: false

    - name: Oracle JDK | Gradle | Molecule | Verify | Gradle version from shell result
      ansible.builtin.debug:
        var: java_rv_jdk_gradle_tmp_version_shell_result

    - name: Oracle JDK | Gradle | Molecule | Verify | Fail if Gradle version is not present
      ansible.builtin.assert:
        that: '"Gradle "+java_rv_jdk_gradle_version in java_rv_jdk_gradle_tmp_version_shell_result.stdout'
        success_msg: Gradle Version {{ java_rv_jdk_gradle_version }} is installed
        fail_msg: Gradle Version {{ java_rv_jdk_gradle_version }} is not installed, Shell result {{ java_rv_jdk_gradle_tmp_version_shell_result.stdout }}

    - name: Oracle JDK | Apache Groovy | Molecule | Verify | Get Apache Groovy version from shell
      ansible.builtin.command: groovy --version
      environment:
        PATH: "{{ java_rv_jdk_groovy_install_path }}/bin:{{ java_rv_jdk_install_path }}/bin:{{ ansible_env.PATH }}"
      register: java_rv_jdk_groovy_tmp_version_shell_result
      changed_when: false

    - name: Oracle JDK | Apache Groovy | Molecule | Verify | Apache Groovy version from shell result
      ansible.builtin.debug:
        var: java_rv_jdk_groovy_tmp_version_shell_result

    - name: Oracle JDK | Apache Groovy | Molecule | Verify | Fail if Apache Groovy version is not present
      ansible.builtin.assert:
        that: '"Groovy Version: {{ java_rv_jdk_groovy_version }}" in java_rv_jdk_groovy_tmp_version_shell_result.stdout'
        success_msg: Apache Groovy Version {{ java_rv_jdk_groovy_version }} is installed
        fail_msg: Apache Groovy Version {{ java_rv_jdk_groovy_version }} is not installed, Shell result {{ java_rv_jdk_groovy_tmp_version_shell_result.stdout }}

    - name: Oracle JDK | Kotlin | Kotlin Compiler | Molecule | Get Dynamic Version
      when: java_rv_jdk_kotlinc_version is not defined
      block:
        - name: Oracle JDK | Kotlin | Kotlin Compiler | Molecule | Get Latest Release from github
          ansible.builtin.uri:
            url: "https://api.github.com/repos/JetBrains/kotlin/releases/latest"
            return_content: true
            headers:
              Accept: "application/vnd.github.v3+json"
          register: java_rv_kotlinc_latest_release_from_github

        - name: Oracle JDK | Kotlin | Kotlin Compiler | Molecule | Set Dynamic Version
          ansible.builtin.set_fact:
            java_rv_jdk_kotlinc_version: "{{ java_rv_kotlinc_latest_release_from_github.json.tag_name[1:] }}"

    - name: Oracle JDK | Kotlin | Kotlin Compiler | Molecule | Verify | Get Kotlin | Kotlin Compiler version from shell
      ansible.builtin.command: kotlinc -version
      environment:
        PATH: "{{ java_rv_jdk_kotlinc_install_path }}/bin:{{ java_rv_jdk_install_path }}/bin:{{ ansible_env.PATH }}"
      register: java_rv_jdk_kotlinc_tmp_version_shell_result
      changed_when: false

    - name: Oracle JDK | Kotlin | Kotlin Compiler | Molecule | Verify | Kotlin | Kotlin Compiler version from shell result
      ansible.builtin.debug:
        var: java_rv_jdk_kotlinc_tmp_version_shell_result

    - name: Oracle JDK | Kotlin | Kotlin Compiler | Molecule | Verify | Fail if Kotlin | Kotlin Compiler version is not present
      ansible.builtin.assert:
        that: '"kotlinc-jvm "+java_rv_jdk_kotlinc_version in java_rv_jdk_kotlinc_tmp_version_shell_result.stderr'
        success_msg: Kotlin | Kotlin Compiler Version {{ java_rv_jdk_kotlinc_version }} is installed
        fail_msg: Kotlin | Kotlin Compiler Version {{ java_rv_jdk_kotlinc_version }} is not installed, Shell result {{ java_rv_jdk_kotlinc_tmp_version_shell_result.stderr }}

    - name: Oracle JDK | GraalVM | Molecule | Verify | Get javac version from shell
      ansible.builtin.command: native-image --version
      environment:
        PATH: "{{ java_rv_jdk_graalvm_install_path }}/bin:{{ java_rv_jdk_install_path }}/bin:{{ ansible_env.PATH }}"
      register: java_rv_jdk_graalvm_tmp_version_shell_result
      changed_when: false

    - name: Oracle JDK | GraalVM | Molecule | Verify | javac version from shell result
      ansible.builtin.debug:
        var: java_rv_jdk_graalvm_tmp_version_shell_result

    - name: Oracle JDK | GraalVM | Molecule | Verify | Fail if javac version is not present
      ansible.builtin.assert:
        that: java_rv_jdk_graalvm_tmp_version_shell_result.stdout is match("native-image "+java_rv_jdk_version+".*")
        success_msg: GraalVM Version {{ java_rv_jdk_version }} is installed
        fail_msg: GraalVM Version {{ java_rv_jdk_version }} is not installed, Shell result {{ java_rv_jdk_tmp_version_shell_result.stdout }}
